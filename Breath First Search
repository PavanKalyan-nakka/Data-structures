#include <stdio.h>
#include <stdlib.h>

int *visited;
int *queue;
int front = 0, rear = -1;
int **adj;
int n; // number of vertices

// enqueue
void enqueue(int vertex) {
    queue[++rear] = vertex;
}

// dequeue
int dequeue() {
    return queue[front++];
}

// BFS function
void bfs(int start) {
    int i, current;
    enqueue(start);
    visited[start] = 1;

    while (front <= rear) {
        current = dequeue();
        printf("%d ", current);

        for (i = 0; i < n; i++) {
            if (adj[current][i] == 1 && !visited[i]) {
                enqueue(i);
                visited[i] = 1;
            }
        }
    }
}

int main() {
    int i, j, start;

    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    // Allocate memory
    adj = (int **)malloc(n * sizeof(int *));
    for (i = 0; i < n; i++)
        adj[i] = (int *)malloc(n * sizeof(int));

    visited = (int *)malloc(n * sizeof(int));
    queue = (int *)malloc(n * sizeof(int));

    printf("Enter the adjacency matrix:\n");
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            scanf("%d", &adj[i][j]);

    for (i = 0; i < n; i++)
        visited[i] = 0;

    printf("Enter the starting vertex (0-based index): ");
    scanf("%d", &start);

    printf("BFS traversal: ");
    bfs(start);

    // Free memory
    for (i = 0; i < n; i++)
        free(adj[i]);
    free(adj);
    free(visited);
    free(queue);

    return 0;
}
